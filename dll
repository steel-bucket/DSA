#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node *next;
    struct Node *prev;

    Node(int x) {
        data = x;
        next = NULL;
        prev = NULL;
    }
};

class Solution {
public:

};

void printList(struct Node *node) {
    while (node != NULL) {
        printf("%d ", node->data);
        node = node->next;
    }
    printf("\n");
}
int main() {
    int t, x, n, i;
    scanf("%d", &t);

    while (t--) {
        struct Node *temp, *head = NULL;
        scanf("%d", &n);

        temp = NULL;

        for (i = 0; i < n; i++) {
            scanf("%d", &x);

            if (head == NULL) {
                head = new Node(x);
                temp = head;
            } else {
                Node *temp1 = new Node(x);
                temp->next = temp1;
                temp1->prev = temp;
                temp = temp->next;
            }
        }

        scanf("%d", &x);

        Solution ob;
        head = ob.deleteNode(head, x);

        printList(head);
        while (head->next != NULL) {
            temp = head;
            head = head->next;
            free(temp);
        }

        free(head);
    }
    return 0;
}

// #include <bits/stdc++.h>
// using namespace std;
//
// class Node {
// public:
//     Node *prev;
//     int data;
//     Node *next;
//
//     Node() {
//         prev = nullptr;
//         data = 0;
//         next = nullptr;
//     }
//
//     explicit Node(int value) {
//         prev = nullptr;
//         data = value;
//         next = nullptr;
//     }
// };
//
// void printList(Node *node) {
//     Node *tmp = node;
//     int c1 = 0, c2 = 0;
//     if (tmp) {
//         while (tmp->next != nullptr) {
//             c1++;
//             tmp = tmp->next;
//         }
//         while (tmp->prev != nullptr) {
//             c2++;
//             tmp = tmp->prev;
//         }
//         if (c1 != c2) {
//             cout << "-1\n";
//             return;
//         }
//     }
//     while (tmp) {
//         cout << tmp->data << ' ';
//         tmp = tmp->next;
//     }
//     cout << endl;
// }
//
//
// class Solution {
// public:
//     Node *deleteNode(Node *head, int x) {
//         x--;
//         Node *t = head;
//         while (x--) {
//             t = t->next;
//         }
//         Node *n = t->next->next;
//         if (n != nullptr)t->next = n;
//         if (n != nullptr)n->prev = n;
//     }
// };
